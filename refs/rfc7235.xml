<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt'?>
<!DOCTYPE rfc [
  <!ENTITY MAY "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MAY</bcp14>">
  <!ENTITY MUST "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST</bcp14>">
  <!ENTITY MUST-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST NOT</bcp14>">
  <!ENTITY OPTIONAL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>OPTIONAL</bcp14>">
  <!ENTITY RECOMMENDED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>RECOMMENDED</bcp14>">
  <!ENTITY REQUIRED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>REQUIRED</bcp14>">
  <!ENTITY SHALL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL</bcp14>">
  <!ENTITY SHALL-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL NOT</bcp14>">
  <!ENTITY SHOULD "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD</bcp14>">
  <!ENTITY SHOULD-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD NOT</bcp14>">
  <!ENTITY mdash "&#8212;">
  <!ENTITY Note "<x:h xmlns:x='http://purl.org/net/xml2rfc/ext'>Note:</x:h>">
  <!ENTITY messaging                    "<xref target='RFC7230' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY semantics                    "<xref target='RFC7231' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY architecture                 "<xref target='RFC7230' x:rel='#architecture' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY conformance                  "<xref target='RFC7230' x:rel='#conformance' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY notation                     "<xref target='RFC7230' x:rel='#notation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY abnf-extension               "<xref target='RFC7230' x:rel='#abnf.extension' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY acks                         "<xref target='RFC7230' x:rel='#acks' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY whitespace                   "<xref target='RFC7230' x:rel='#whitespace' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY field-components             "<xref target='RFC7230' x:rel='#field.components' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY effective-request-uri        "<xref target='RFC7230' x:rel='#effective.request.uri' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY msg-orient-and-buffering     "<xref target='RFC7230' x:rel='#intermediaries' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY end-to-end.and-hop-by-hop    "<xref target='RFC7230' x:rel='#end-to-end.and.hop-by-hop.header-fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status.403                   "<xref target='RFC7231' x:rel='#status.403' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY caching-authenticated-responses "<xref target='RFC7234' x:rel='#caching.authenticated.responses' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY caching-rqd-no-store         "<xref target='RFC7234' x:rel='#cache-request-directive.no-store' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY caching-rsd-private          "<xref target='RFC7234' x:rel='#cache-response-directive.private' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
]>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-references-in-index="yes" ?>
<rfc obsoletes="2616" updates="2617" category="std" x:maturity-level="proposed"
     ipr="pre5378Trust200902" number="7235" consensus="yes"
     xmlns:x='http://purl.org/net/xml2rfc/ext'>
<x:link rel="prev" basename="rfc7234"/>
<!--<x:feedback template="mailto:ietf-http-wg@w3.org?subject={docname},%20%22{section}%22&amp;body=&lt;{ref}&gt;:"/>-->
<front>

  <title abbrev="HTTP/1.1 Authentication">Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>

  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <email>julian.reschke@greenbytes.de</email>
      <uri>http://greenbytes.de/tech/webdav/</uri>
    </address>
  </author>

  <date month="June" year="2014"/>

  <area>Applications</area>
  <workgroup>HTTPbis</workgroup>

  <keyword>Hypertext Transfer Protocol</keyword>
  <keyword>HTTP</keyword>
  <keyword>HTTP authentication</keyword>

<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is a stateless application-level
   protocol for distributed, collaborative, hypermedia information systems.
   This document defines the HTTP Authentication framework.
</t>
</abstract>
</front>
<middle>
<section title="Introduction" anchor="introduction">
<t>
   HTTP provides a general framework for access control and authentication,
   via an extensible set of challenge-response authentication schemes, which
   can be used by a server to challenge a client request and by a client to
   provide authentication information. This document defines HTTP/1.1 
   authentication in terms of the architecture defined in
   "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing"
   <xref target="RFC7230"/>, including the general framework previously
   described in "HTTP Authentication: Basic and Digest Access Authentication" <xref target="RFC2617"/> and
   the related fields and status codes previously defined in
   "Hypertext Transfer Protocol -- HTTP/1.1" <xref target="RFC2616"/>.
</t>
<t>
   The IANA Authentication Scheme Registry
   (<xref target="authentication.scheme.registry"/>) lists registered
   authentication schemes and their corresponding specifications, including
   the "basic" and "digest" authentication schemes previously defined by
   <xref target="RFC2617" x:fmt="none">RFC 2617</xref>.
</t>

<section title="Conformance and Error Handling" anchor="conformance">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
   Conformance criteria and considerations regarding error handling
   are defined in &conformance;.
</t>
</section>

<section title="Syntax Notation" anchor="notation">
<t>
   This specification uses the Augmented Backus-Naur Form (ABNF) notation of
   <xref target="RFC5234"/> with a list extension, defined in
   &abnf-extension;, that allows for compact definition of
   comma-separated lists using a '#' operator (similar to how the '*' operator
   indicates repetition).
   <xref target="imported.abnf"/> describes rules imported from
   other documents. 
   <xref target="collected.abnf"/> shows the collected grammar with all list
   operators expanded to standard ABNF notation.
</t>
</section>
</section>

<section title="Access Authentication Framework" anchor="access.authentication.framework">

<section title="Challenge and Response" anchor="challenge.and.response">
  <x:anchor-alias value="auth-scheme"/>
  <x:anchor-alias value="auth-param"/>
  <x:anchor-alias value="token68"/>
  <x:anchor-alias value="challenge"/>
  <x:anchor-alias value="credentials"/>
<t>
   HTTP provides a simple challenge-response authentication framework
   that can be used by a server to challenge a client request and by a
   client to provide authentication information. It uses a case-insensitive
   token as a means to identify the authentication scheme, followed
   by additional information necessary for achieving authentication via that
   scheme. The latter can be either a comma-separated list of parameters or a
   single sequence of characters capable of holding base64-encoded
   information.
</t>
<t>
   Authentication parameters are name=value pairs, where the name token is
   matched case-insensitively,
   and each parameter name &MUST; only occur once per challenge.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="auth-scheme"/><iref primary="true" item="Grammar" subitem="auth-param"/><iref primary="true" item="Grammar" subitem="token68"/>
  auth-scheme    = <x:ref>token</x:ref>
  
  auth-param     = <x:ref>token</x:ref> <x:ref>BWS</x:ref> "=" <x:ref>BWS</x:ref> ( <x:ref>token</x:ref> / <x:ref>quoted-string</x:ref> )

  token68        = 1*( <x:ref>ALPHA</x:ref> / <x:ref>DIGIT</x:ref> /
                       "-" / "." / "_" / "~" / "+" / "/" ) *"=" 
</artwork></figure>
<t>
   The token68 syntax allows the 66 unreserved URI characters
   (<xref target="RFC3986"/>), plus a few others, so that it can hold a
   base64, base64url (URL and filename safe alphabet), base32, or base16 (hex)
   encoding, with or without padding, but excluding whitespace
   (<xref target="RFC4648"/>).
</t>
<t>
   A <x:ref>401 (Unauthorized)</x:ref> response message is used by an origin
   server to challenge the authorization of a user agent, including a
   <x:ref>WWW-Authenticate</x:ref> header field containing at least one
   challenge applicable to the requested resource.
</t>
<t>   
   A <x:ref>407 (Proxy Authentication Required)</x:ref> response message is
   used by a proxy to challenge the authorization of a client, including a
   <x:ref>Proxy-Authenticate</x:ref> header field containing at least one
   challenge applicable to the proxy for the requested resource.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="challenge"/>
  <x:ref>challenge</x:ref>   = <x:ref>auth-scheme</x:ref> [ 1*<x:ref>SP</x:ref> ( <x:ref>token68</x:ref> / #<x:ref>auth-param</x:ref> ) ]
</artwork></figure>
<x:note>
  <t>
     &Note; Many clients fail to parse a challenge that contains an unknown
     scheme. A workaround for this problem is to list well-supported schemes
     (such as "basic") first.<!-- see http://greenbytes.de/tech/tc/httpauth/#multibasicunknown2 -->
  </t>
</x:note>
<t>
   A user agent that wishes to authenticate itself with an origin server
   &mdash; usually, but not necessarily, after receiving a
   <x:ref>401 (Unauthorized)</x:ref> &mdash; can do so by including an
   <x:ref>Authorization</x:ref> header field with the request.
</t>
<t>   
   A client that wishes to authenticate itself with a proxy &mdash; usually,
   but not necessarily, after receiving a
   <x:ref>407 (Proxy Authentication Required)</x:ref> &mdash; can do so by
   including a <x:ref>Proxy-Authorization</x:ref> header field with the
   request.
</t>
<t>
   Both the <x:ref>Authorization</x:ref> field value and the
   <x:ref>Proxy-Authorization</x:ref> field value contain the client's
   credentials for the realm of the resource being requested, based upon a
   challenge received in a response (possibly at some point in the past).
   When creating their values, the user agent ought to do so by selecting the
   challenge with what it considers to be the most secure auth-scheme that it
   understands, obtaining credentials from the user as appropriate.
   Transmission of credentials within header field values implies significant
   security considerations regarding the confidentiality of the underlying
   connection, as described in
   <xref target="confidentiality.of.credentials"/>.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="credentials"/>
  <x:ref>credentials</x:ref> = <x:ref>auth-scheme</x:ref> [ 1*<x:ref>SP</x:ref> ( <x:ref>token68</x:ref> / #<x:ref>auth-param</x:ref> ) ]
</artwork></figure>
<t>
   Upon receipt of a request for a protected resource that omits credentials,
   contains invalid credentials (e.g., a bad password) or partial credentials
   (e.g., when the authentication scheme requires more than one round trip),
   an origin server &SHOULD; send a <x:ref>401 (Unauthorized)</x:ref> response
   that contains a <x:ref>WWW-Authenticate</x:ref> header field with at least
   one (possibly new) challenge applicable to the requested resource.
</t>
<t>
   Likewise, upon receipt of a request that omits proxy credentials or
   contains invalid or partial proxy credentials, a proxy that requires
   authentication &SHOULD; generate a
   <x:ref>407 (Proxy Authentication Required)</x:ref> response that contains
   a <x:ref>Proxy-Authenticate</x:ref> header field with at least one
   (possibly new) challenge applicable to the proxy.
</t>
<t>
   A server that receives valid credentials that are not adequate to gain
   access ought to respond with the <x:ref>403 (Forbidden)</x:ref> status
   code (&status.403;).
</t>
<t>
   HTTP does not restrict applications to this simple challenge-response
   framework for access authentication. Additional mechanisms can be used,
   such as authentication at the transport level or via message encapsulation,
   and with additional header fields specifying authentication information.
   However, such additional mechanisms are not defined by this specification.
</t>
</section>

<section title="Protection Space (Realm)" anchor="protection.space">
  <iref item="Protection Space"/>
  <iref item="Realm"/>
  <iref item="Canonical Root URI"/>
<t>
   The "<x:dfn>realm</x:dfn>" authentication parameter is reserved for use by
   authentication schemes that wish to indicate a scope of protection.
</t>
<t>
   A <x:dfn>protection space</x:dfn> is defined by the canonical root URI (the
   scheme and authority components of the effective request URI; see
   <xref target="RFC7230" x:fmt="of" x:rel="#effective.request.uri"/>) of the
   server being accessed, in combination with the realm value if present.
   These realms allow the protected resources on a server to be
   partitioned into a set of protection spaces, each with its own
   authentication scheme and/or authorization database. The realm value
   is a string, generally assigned by the origin server, that can have
   additional semantics specific to the authentication scheme. Note that a
   response can have multiple challenges with the same auth-scheme but
   with different realms.
</t>
<t>
   The protection space determines the domain over which credentials can
   be automatically applied. If a prior request has been authorized, the
   user agent &MAY; reuse the same credentials for all other requests within
   that protection space for a period of time determined by the authentication
   scheme, parameters, and/or user preferences (such as a configurable
   inactivity timeout). Unless specifically allowed by the authentication
   scheme, a single protection space cannot extend outside the scope of its
   server.
</t>
<t>
   For historical reasons, a sender &MUST; only generate the quoted-string syntax.
   Recipients might have to support both token and quoted-string syntax for
   maximum interoperability with existing clients that have been accepting both
   notations for a long time.
</t>
</section>

</section>

<section title="Status Code Definitions" anchor="status.code.definitions">
<section title="401 Unauthorized" anchor="status.401">
  <iref primary="true" item="401 Unauthorized (status code)" x:for-anchor=""/>
  <x:anchor-alias value="401 (Unauthorized)"/>
<t>
   The <x:dfn>401 (Unauthorized)</x:dfn> status code indicates that the
   request has not been applied because it lacks valid authentication
   credentials for the target resource.
   The server generating a 401 response &MUST; send a
   <x:ref>WWW-Authenticate</x:ref> header field
   (<xref target="header.www-authenticate"/>)
   containing at least one challenge applicable to the target resource.
</t>
<t>
   If the request included authentication credentials, then the 401 response
   indicates that authorization has been refused for those credentials.
   The user agent &MAY; repeat the request with a new or replaced
   <x:ref>Authorization</x:ref> header field (<xref target="header.authorization"/>).
   If the 401 response contains the same challenge as the prior response, and
   the user agent has already attempted authentication at least once, then the
   user agent &SHOULD; present the enclosed representation to the user, since
   it usually contains relevant diagnostic information.
</t>
</section>

<section title="407 Proxy Authentication Required" anchor="status.407">
  <iref primary="true" item="407 Proxy Authentication Required (status code)" x:for-anchor=""/>
  <x:anchor-alias value="407 (Proxy Authentication Required)"/>
<t>
   The <x:dfn>407 (Proxy Authentication Required)</x:dfn> status code is
   similar to <x:ref>401 (Unauthorized)</x:ref>, but it indicates that the client
   needs to authenticate itself in order to use a proxy.
   The proxy &MUST; send a <x:ref>Proxy-Authenticate</x:ref> header field
   (<xref target="header.proxy-authenticate"/>) containing a challenge
   applicable to that proxy for the target resource. The client &MAY; repeat
   the request with a new or replaced <x:ref>Proxy-Authorization</x:ref>
   header field (<xref target="header.proxy-authorization"/>).
</t>
</section>
</section>

<section title="Header Field Definitions" anchor="header.field.definitions">
<t>
   This section defines the syntax and semantics of header fields related to
   the HTTP authentication framework.
</t>

<section title="WWW-Authenticate" anchor="header.www-authenticate">
  <iref primary="true" item="WWW-Authenticate header field" x:for-anchor=""/>
  <x:anchor-alias value="WWW-Authenticate"/>
<t>
   The "WWW-Authenticate" header field indicates the authentication scheme(s)
   and parameters applicable to the target resource.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="WWW-Authenticate"/>
  <x:ref>WWW-Authenticate</x:ref> = 1#<x:ref>challenge</x:ref>
</artwork></figure>
<t>
   A server generating a <x:ref>401 (Unauthorized)</x:ref> response
   &MUST; send a WWW-Authenticate header field containing at least one
   challenge.  A server &MAY; generate a WWW-Authenticate header field
   in other response messages to indicate that supplying credentials
   (or different credentials) might affect the response.
</t>
<t>
   A proxy forwarding a response &MUST-NOT; modify any
   <x:ref>WWW-Authenticate</x:ref> fields in that response.
</t>
<t>
   User agents are advised to take special care in parsing the field value, as
   it might contain more than one challenge, and each challenge can contain a
   comma-separated list of authentication parameters. Furthermore, the header
   field itself can occur multiple times.
</t>
<figure>
  <preamble>For instance:</preamble>
  <artwork type="example">
  WWW-Authenticate: Newauth realm="apps", type=1,
                    title="Login to \"apps\"", Basic realm="simple"
</artwork>
  <postamble>
  This header field contains two challenges; one for the "Newauth" scheme
  with a realm value of "apps", and two additional parameters "type" and
  "title", and another one for the "Basic" scheme with a realm value of
  "simple".
</postamble></figure>
<x:note>
  <t>
    &Note; The challenge grammar production uses the list syntax as 
    well. Therefore, a sequence of comma, whitespace, and comma can be
    considered either as applying to the preceding challenge, or to be an
    empty entry in the list of challenges. In practice, this ambiguity
    does not affect the semantics of the header field value and thus is
    harmless.
  </t>
</x:note>
</section>

<section title="Authorization" anchor="header.authorization">
  <iref primary="true" item="Authorization header field" x:for-anchor=""/>
  <x:anchor-alias value="Authorization"/>
<t>
   The "Authorization" header field allows a user agent to authenticate itself
   with an origin server &mdash; usually, but not necessarily, after receiving
   a <x:ref>401 (Unauthorized)</x:ref> response. Its value consists of
   credentials containing the authentication information of the user agent for
   the realm of the resource being requested.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Authorization"/>
  <x:ref>Authorization</x:ref> = <x:ref>credentials</x:ref>
</artwork></figure>
<t>
   If a request is authenticated and a realm specified, the same credentials
   are presumed to be valid for all other requests within this realm (assuming
   that the authentication scheme itself does not require otherwise, such as
   credentials that vary according to a challenge value or using synchronized
   clocks).
</t>
<t>
   A proxy forwarding a request &MUST-NOT; modify any
   <x:ref>Authorization</x:ref> fields in that request.
   See &caching-authenticated-responses; for details of and requirements
   pertaining to handling of the Authorization field by HTTP caches.
</t>
</section>

<section title="Proxy-Authenticate" anchor="header.proxy-authenticate">
  <iref primary="true" item="Proxy-Authenticate header field" x:for-anchor=""/>
  <x:anchor-alias value="Proxy-Authenticate"/>
<t>
   The "Proxy-Authenticate" header field consists of at least one
   challenge that indicates the authentication scheme(s) and parameters
   applicable to the proxy for this effective request URI
   (&effective-request-uri;).
   A proxy &MUST; send at least one Proxy-Authenticate header field in
   each <x:ref>407 (Proxy Authentication Required)</x:ref> response that it
   generates.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Proxy-Authenticate"/>
  <x:ref>Proxy-Authenticate</x:ref> = 1#<x:ref>challenge</x:ref>
</artwork></figure>
<t>
   Unlike <x:ref>WWW-Authenticate</x:ref>, the Proxy-Authenticate header field
   applies only to the next outbound client on the response chain.
   This is because only the client that chose a given proxy is likely to have
   the credentials necessary for authentication.  However, when multiple
   proxies are used within the same administrative domain, such as office and
   regional caching proxies within a large corporate network, it is common
   for credentials to be generated by the user agent and passed through the
   hierarchy until consumed.  Hence, in such a configuration, it will appear
   as if Proxy-Authenticate is being forwarded because each proxy will send
   the same challenge set.
</t>
<t>
   Note that the parsing considerations for <x:ref>WWW-Authenticate</x:ref>
   apply to this header field as well; see <xref target="header.www-authenticate"/>
   for details.
</t>
</section>

<section title="Proxy-Authorization" anchor="header.proxy-authorization">
  <iref primary="true" item="Proxy-Authorization header field" x:for-anchor=""/>
  <x:anchor-alias value="Proxy-Authorization"/>
<t>
   The "Proxy-Authorization" header field allows the client to
   identify itself (or its user) to a proxy that requires
   authentication. Its value consists of credentials containing the
   authentication information of the client for the proxy and/or realm of the
   resource being requested.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Proxy-Authorization"/>
  <x:ref>Proxy-Authorization</x:ref> = <x:ref>credentials</x:ref>
</artwork></figure>
<t>
   Unlike <x:ref>Authorization</x:ref>, the Proxy-Authorization header field
   applies only to the next inbound proxy that demanded authentication using
   the <x:ref>Proxy-Authenticate</x:ref> field. When multiple proxies are used
   in a chain, the Proxy-Authorization header field is consumed by the first
   inbound proxy that was expecting to receive credentials. A proxy &MAY;
   relay the credentials from the client request to the next proxy if that is
   the mechanism by which the proxies cooperatively authenticate a given
   request.
</t>
</section>

</section>

<section title="IANA Considerations" anchor="IANA.considerations">

<section title="Authentication Scheme Registry" anchor="authentication.scheme.registry">
<t>
   The "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry" defines the namespace for the
   authentication schemes in challenges and credentials. It has been created
   and is now maintained at <eref target="http://www.iana.org/assignments/http-authschemes"/>.
</t>

<section title="Procedure" anchor="authentication.scheme.registry.procedure">
<t>
  Registrations &MUST; include the following fields:
  <list style="symbols">
    <t>Authentication Scheme Name</t>
    <t>Pointer to specification text</t>
    <t>Notes (optional)</t>
  </list>
</t>
<t>
  Values to be added to this namespace require IETF Review
  (see <xref target="RFC5226" x:fmt="," x:sec="4.1"/>).
</t>
</section>

<section title="Considerations for New Authentication Schemes" anchor="considerations.for.new.authentication.schemes">
<t>
  There are certain aspects of the HTTP Authentication Framework that put
  constraints on how new authentication schemes can work:
</t>
<t>
  <list style="symbols">
    <x:lt>
    <t>
      HTTP authentication is presumed to be stateless: all of the information
      necessary to authenticate a request &MUST; be provided in the request,
      rather than be dependent on the server remembering prior requests.
      Authentication based on, or bound to, the underlying connection is
      outside the scope of this specification and inherently flawed unless
      steps are taken to ensure that the connection cannot be used by any
      party other than the authenticated user
      (see &msg-orient-and-buffering;). 
    </t>
    </x:lt>
    <x:lt>
    <t>
      The authentication parameter "realm" is reserved for defining protection
      spaces as described in <xref target="protection.space"/>. New schemes
      &MUST-NOT; use it in a way incompatible with that definition.
    </t>
    </x:lt>
    <x:lt>
    <t>
      The "token68" notation was introduced for compatibility with existing
      authentication schemes and can only be used once per challenge or credential.
      Thus, new schemes ought to use the auth-param syntax instead, because
      otherwise future extensions will be impossible.
    </t>
    </x:lt>
    <x:lt>
    <t>
      The parsing of challenges and credentials is defined by this specification
      and cannot be modified by new authentication schemes. When the auth-param
      syntax is used, all parameters ought to support both token and
      quoted-string syntax, and syntactical constraints ought to be defined on
      the field value after parsing (i.e., quoted-string processing). This is
      necessary so that recipients can use a generic parser that applies to
      all authentication schemes.
    </t>
    <t>
      &Note; The fact that the value syntax for the "realm" parameter
      is restricted to quoted-string was a bad design choice not to be repeated
      for new parameters.
    </t>
    </x:lt>
    <x:lt>
    <t>
      Definitions of new schemes ought to define the treatment of unknown
      extension parameters. In general, a "must-ignore" rule is preferable
      to a "must-understand" rule, because otherwise it will be hard to introduce
      new parameters in the presence of legacy recipients. Furthermore,
      it's good to describe the policy for defining new parameters (such
      as "update the specification" or "use this registry"). 
    </t>
    </x:lt>
    <x:lt>
    <t>
      Authentication schemes need to document whether they are usable in
      origin-server authentication (i.e., using <x:ref>WWW-Authenticate</x:ref>),
      and/or proxy authentication (i.e., using <x:ref>Proxy-Authenticate</x:ref>).
    </t>
    </x:lt>
    <x:lt>
    <t>
      The credentials carried in an <x:ref>Authorization</x:ref> header field are specific to
      the user agent and, therefore, have the same effect on HTTP caches as the
      "private" Cache-Control response directive (&caching-rsd-private;),
      within the scope of the request in which they appear.
    </t>
    <t>
      Therefore, new authentication schemes that choose not to carry
      credentials in the <x:ref>Authorization</x:ref> header field (e.g., using a newly defined
      header field) will need to explicitly disallow caching, by mandating the use of
      either Cache-Control request directives (e.g., "no-store",
      &caching-rqd-no-store;) or response directives (e.g., "private").
    </t>
    </x:lt>
  </list>
</t>
</section>
</section>

<section title="Status Code Registration" anchor="status.code.registration">
<t>
   The "Hypertext Transfer Protocol (HTTP) Status Code Registry" located at <eref target="http://www.iana.org/assignments/http-status-codes"/>
   has been updated with the registrations below:
</t>
<?BEGININC p7-auth.iana-status-codes ?>
<!--AUTOGENERATED FROM extract-status-code-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.status.code.registration.table">
   <ttcol>Value</ttcol>
   <ttcol>Description</ttcol>
   <ttcol>Reference</ttcol>
   <c>401</c>
   <c>Unauthorized</c>
   <c>
      <xref target="status.401"/>
   </c>
   <c>407</c>
   <c>Proxy Authentication Required</c>
   <c>
      <xref target="status.407"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p7-auth.iana-status-codes ?>
</section>

<section title="Header Field Registration" anchor="header.field.registration">
<t>
   HTTP header fields are registered within the "Message Headers" registry
   maintained at
   <eref target="http://www.iana.org/assignments/message-headers/"/>.
</t>
<t>
   This document defines the following HTTP header fields, so the
   "Permanent Message Header Field Names" registry has been updated
   accordingly (see <xref target="BCP90"/>).
</t>
<?BEGININC p7-auth.iana-headers ?>
<!--AUTOGENERATED FROM extract-header-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.header.registration.table">
   <ttcol>Header Field Name</ttcol>
   <ttcol>Protocol</ttcol>
   <ttcol>Status</ttcol>
   <ttcol>Reference</ttcol>

   <c>Authorization</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.authorization"/>
   </c>
   <c>Proxy-Authenticate</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.proxy-authenticate"/>
   </c>
   <c>Proxy-Authorization</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.proxy-authorization"/>
   </c>
   <c>WWW-Authenticate</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.www-authenticate"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p7-auth.iana-headers ?>
<t>
   The change controller is: "IETF (iesg@ietf.org) - Internet Engineering Task Force".
</t>
</section>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
   This section is meant to inform developers, information providers, and
   users of known security concerns specific to HTTP authentication.
   More general security considerations are addressed in HTTP messaging
   &messaging; and semantics &semantics;.
</t>
<t>
   Everything about the topic of HTTP authentication is a security
   consideration, so the list of considerations below is not exhaustive.
   Furthermore, it is limited to security considerations regarding the
   authentication framework, in general, rather than discussing all of the
   potential considerations for specific authentication schemes (which ought
   to be documented in the specifications that define those schemes).
   Various organizations maintain topical information and links to current
   research on Web application security (e.g., <xref target="OWASP"/>),
   including common pitfalls for implementing and using the authentication
   schemes found in practice.
</t>

<section title="Confidentiality of Credentials" anchor="confidentiality.of.credentials">
<t>
   The HTTP authentication framework does not define a single mechanism for
   maintaining the confidentiality of credentials; instead, each
   authentication scheme defines how the credentials are encoded prior to
   transmission. While this provides flexibility for the development of future
   authentication schemes, it is inadequate for the protection of existing
   schemes that provide no confidentiality on their own, or that do not
   sufficiently protect against replay attacks. Furthermore, if the server
   expects credentials that are specific to each individual user, the exchange
   of those credentials will have the effect of identifying that user even if
   the content within credentials remains confidential.
</t>
<t>
   HTTP depends on the security properties of the underlying transport- or
   session-level connection to provide confidential transmission of header
   fields. In other words, if a server limits access to authenticated users
   using this framework, the server needs to ensure that the connection is
   properly secured in accordance with the nature of the authentication
   scheme used. For example, services that depend on individual user
   authentication often require a connection to be secured with TLS
   ("Transport Layer Security", <xref target="RFC5246"/>) prior to exchanging
   any credentials.
</t>
</section>

<section title="Authentication Credentials and Idle Clients" anchor="auth.credentials.and.idle.clients">
<t>
   Existing HTTP clients and user agents typically retain authentication
   information indefinitely. HTTP does not provide a mechanism for the
   origin server to direct clients to discard these cached credentials, since
   the protocol has no awareness of how credentials are obtained or managed
   by the user agent. The mechanisms for expiring or revoking credentials can
   be specified as part of an authentication scheme definition.
</t>
<t>
   Circumstances under which credential caching can interfere with the
   application's security model include but are not limited to:
  <list style="symbols">
     <t>Clients that have been idle for an extended period, following
        which the server might wish to cause the client to re-prompt the
        user for credentials.</t>

     <t>Applications that include a session termination indication
        (such as a "logout" or "commit" button on a page) after which
        the server side of the application "knows" that there is no
        further reason for the client to retain the credentials.</t>
  </list>
</t>
<t>
   User agents that cache credentials are encouraged to provide a readily
   accessible mechanism for discarding cached credentials under user control.
</t>
</section>

<section title="Protection Spaces" anchor="protection.spaces">
<t>
  Authentication schemes that solely rely on the "realm" mechanism for
  establishing a protection space will expose credentials to all resources on
  an origin server. Clients that have successfully made authenticated requests
  with a resource can use the same authentication credentials for other
  resources on the same origin server. This makes it possible for a different
  resource to harvest authentication credentials for other resources.
</t>
<t>
  This is of particular concern when an origin server hosts resources for multiple
  parties under the same canonical root URI (<xref target="protection.space"/>).
  Possible mitigation strategies include restricting direct access to
  authentication credentials (i.e., not making the content of the
  <x:ref>Authorization</x:ref> request header field available), and separating protection
  spaces by using a different host name (or port number) for each party.
</t>
</section>
</section>

<section title="Acknowledgments" anchor="acks">
<t>
  This specification takes over the definition of the HTTP Authentication
  Framework, previously defined in <xref target="RFC2617" x:fmt="none">RFC 2617</xref>.
  We thank John Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler, Scott D. Lawrence,
  Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart for their work
  on that specification. See <xref target="RFC2617" x:fmt="of" x:sec="6"/>
  for further acknowledgements.  
</t>
<t>
  See &acks; for the Acknowledgments related to this document revision.
</t>
</section>
</middle>

<back>

<references title="Normative References">

<reference anchor="RFC7230">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="June" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7230"/>
  <x:source href="rfc7230.xml" basename="rfc7230"/>
</reference>

<reference anchor="RFC7231">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
    <author fullname="Roy T. Fielding" initials="R." role="editor" surname="Fielding">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author fullname="Julian F. Reschke" initials="J. F." role="editor" surname="Reschke">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="June" year="2014" />
  </front>
  <seriesInfo name="RFC" value="7231"/>
  <x:source basename="rfc7231" href="rfc7231.xml">
    <x:defines>403 (Forbidden)</x:defines>
    <x:defines>Location</x:defines>
  </x:source>
</reference>

<reference anchor="RFC7234">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham" role="editor">
      <organization>Akamai</organization>
      <address><email>mnot@mnot.net</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="June" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7234"/>
  <x:source href="rfc7234.xml" basename="rfc7234"/>
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials="S." surname="Bradner" fullname="Scott Bradner">
      <organization>Harvard University</organization>
      <address><email>sob@harvard.edu</email></address>
    </author>
    <date month="March" year="1997"/>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor="RFC5234">
  <front>
    <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
    <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
      <organization>Brandenburg InternetWorking</organization>
      <address>
        <email>dcrocker@bbiw.net</email>
      </address>  
    </author>
    <author initials="P." surname="Overell" fullname="Paul Overell">
      <organization>THUS plc.</organization>
      <address>
        <email>paul.overell@thus.net</email>
      </address>
    </author>
    <date month="January" year="2008"/>
  </front>
  <seriesInfo name="STD" value="68"/>
  <seriesInfo name="RFC" value="5234"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="RFC2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="R. Fielding">
      <organization>University of California, Irvine</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization>W3C</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>Compaq Computer Corporation</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="H. Frystyk">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="L. Masinter">
      <organization>Xerox Corporation</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="P. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
      <organization>W3C</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor="RFC2617">
  <front>
    <title abbrev="HTTP Authentication">HTTP Authentication: Basic and Digest Access Authentication</title>
    <author initials="J." surname="Franks" fullname="John Franks">
      <organization>Northwestern University, Department of Mathematics</organization>
      <address><email>john@math.nwu.edu</email></address>
    </author>
    <author initials="P.M." surname="Hallam-Baker" fullname="Phillip M. Hallam-Baker">
      <organization>Verisign Inc.</organization>
      <address><email>pbaker@verisign.com</email></address>
    </author>
    <author initials="J.L." surname="Hostetler" fullname="Jeffery L. Hostetler">
      <organization>AbiSource, Inc.</organization>
      <address><email>jeff@AbiSource.com</email></address>
    </author>
    <author initials="S.D." surname="Lawrence" fullname="Scott D. Lawrence">
      <organization>Agranat Systems, Inc.</organization>
      <address><email>lawrence@agranat.com</email></address>
    </author>
    <author initials="P.J." surname="Leach" fullname="Paul J. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="A." surname="Luotonen" fullname="Ari Luotonen">
      <organization>Netscape Communications Corporation</organization>
    </author>
    <author initials="L." surname="Stewart" fullname="Lawrence C. Stewart">
      <organization>Open Market, Inc.</organization>
      <address><email>stewart@OpenMarket.com</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2617"/>
</reference>

<reference anchor='BCP90'>
  <front>
    <title>Registration Procedures for Message Header Fields</title>
    <author initials='G.' surname='Klyne' fullname='G. Klyne'>
      <organization>Nine by Nine</organization>
      <address><email>GK-IETF@ninebynine.org</email></address>
    </author>
    <author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
      <organization>BEA Systems</organization>
      <address><email>mnot@pobox.com</email></address>
    </author>
    <author initials='J.' surname='Mogul' fullname='J. Mogul'>
      <organization>HP Labs</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <date year='2004' month='September' />
  </front>
  <seriesInfo name='BCP' value='90' />
  <seriesInfo name='RFC' value='3864' />
</reference>

<reference anchor="RFC3986">
 <front>
  <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
  <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
       <email>timbl@w3.org</email>
       <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>
  <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>
  <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
    <organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization>
    <address>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  <date month='January' year='2005'></date>
 </front>
 <seriesInfo name="STD" value="66"/>
 <seriesInfo name="RFC" value="3986"/>
</reference>

<reference anchor="RFC4648">
  <front>
    <title>The Base16, Base32, and Base64 Data Encodings</title>
    <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
    <date year="2006" month="October"/>
  </front>
  <seriesInfo value="4648" name="RFC"/>
</reference>

<reference anchor='RFC5226'>
  <front>
    <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
    <author initials='T.' surname='Narten' fullname='T. Narten'>
      <organization>IBM</organization>
      <address><email>narten@us.ibm.com</email></address>
    </author>
    <author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
      <organization>Google</organization>
      <address><email>Harald@Alvestrand.no</email></address>
    </author>
    <date year='2008' month='May' />
  </front>
  <seriesInfo name='BCP' value='26' />
  <seriesInfo name='RFC' value='5226' />
</reference>

<reference anchor="OWASP" target="https://www.owasp.org/">
	<front>
    <title abbrev="OWASP">A Guide to Building Secure Web Applications and Web Services</title>
    <author role="editor" initials="A." surname="van der Stock"
            fullname="Andrew van der Stock"/>
    <date month="July" day="27" year="2005"/>
  </front>
  <seriesInfo name="The Open Web Application Security Project (OWASP)" value="2.0.1"/>
</reference>

<reference anchor='RFC5246'>
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
      <author initials='T.' surname='Dierks' fullname='T. Dierks'/>
      <author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
         <organization>RTFM, Inc.</organization>
      </author>
      <date year='2008' month='August' />
   </front>
   <seriesInfo name='RFC' value='5246' />
</reference>

</references>

<section title="Changes from RFCs 2616 and 2617" anchor="changes.from.rfc.2616">
<t>
  The framework for HTTP Authentication is now defined by this document,
  rather than RFC 2617.
</t>
<t>
  The "realm" parameter is no longer always required on challenges;
  consequently, the ABNF allows challenges without any auth parameters.
  (<xref target="access.authentication.framework"/>)
</t>
<t>
  The "token68" alternative to auth-param lists has been added for consistency
  with legacy authentication schemes such as "Basic".
  (<xref target="access.authentication.framework"/>)
</t>
<t>
  This specification introduces the Authentication Scheme Registry, along with
  considerations for new authentication schemes.
  (<xref target="authentication.scheme.registry"/>)
</t>
</section>
 
<section title="Imported ABNF" anchor="imported.abnf">
  <x:anchor-alias value="ALPHA"/>
  <x:anchor-alias value="CR"/>
  <x:anchor-alias value="DIGIT"/>
  <x:anchor-alias value="LF"/>
  <x:anchor-alias value="OCTET"/>
  <x:anchor-alias value="VCHAR"/>
  <x:anchor-alias value="SP"/>
  <x:anchor-alias value="quoted-string"/>
  <x:anchor-alias value="token"/>
  <x:anchor-alias value="BWS"/>
  <x:anchor-alias value="OWS"/>
<t>
  The following core rules are included by
  reference, as defined in <xref target="RFC5234" x:fmt="of" x:sec="B.1"/>:
  ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls),
  DIGIT (decimal 0-9), DQUOTE (double quote),
  HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed),
  OCTET (any 8-bit sequence of data), SP (space), and
  VCHAR (any visible US-ASCII character).
</t>
<t>
   The rules below are defined in <xref target="RFC7230"/>:
</t>
<figure><artwork type="abnf2616">
  <x:ref>BWS</x:ref>           = &lt;BWS, see &whitespace;&gt;
  <x:ref>OWS</x:ref>           = &lt;OWS, see &whitespace;&gt;
  <x:ref>quoted-string</x:ref> = &lt;quoted-string, see &field-components;&gt;
  <x:ref>token</x:ref>         = &lt;token, see &field-components;&gt;
</artwork></figure>
</section> 

<?BEGININC p7-auth.abnf-appendix ?>
<section xmlns:x="http://purl.org/net/xml2rfc/ext" title="Collected ABNF" anchor="collected.abnf">
<t>
  In the collected ABNF below, list rules are expanded as per <xref target="RFC7230" x:rel="#notation"/>.
</t><figure>
<artwork type="abnf" name="p7-auth.parsed-abnf">
<x:ref>Authorization</x:ref> = credentials

<x:ref>BWS</x:ref> = &lt;BWS, see [RFC7230], Section 3.2.3&gt;

<x:ref>OWS</x:ref> = &lt;OWS, see [RFC7230], Section 3.2.3&gt;

<x:ref>Proxy-Authenticate</x:ref> = *( "," OWS ) challenge *( OWS "," [ OWS
 challenge ] )
<x:ref>Proxy-Authorization</x:ref> = credentials

<x:ref>WWW-Authenticate</x:ref> = *( "," OWS ) challenge *( OWS "," [ OWS challenge
 ] )

<x:ref>auth-param</x:ref> = token BWS "=" BWS ( token / quoted-string )
<x:ref>auth-scheme</x:ref> = token

<x:ref>challenge</x:ref> = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param ) *(
 OWS "," [ OWS auth-param ] ) ] ) ]
<x:ref>credentials</x:ref> = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param )
 *( OWS "," [ OWS auth-param ] ) ] ) ]

<x:ref>quoted-string</x:ref> = &lt;quoted-string, see [RFC7230], Section 3.2.6&gt;

<x:ref>token</x:ref> = &lt;token, see [RFC7230], Section 3.2.6&gt;
<x:ref>token68</x:ref> = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )
 *"="
</artwork>
</figure>
</section>
<?ENDINC p7-auth.abnf-appendix ?>
</back>
</rfc>
